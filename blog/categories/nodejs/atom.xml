<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NodeJS | 鄭傑森的 "扣"]]></title>
  <link href="http://jasoncheng.github.com/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://jasoncheng.github.com/"/>
  <updated>2013-11-25T19:30:15+08:00</updated>
  <id>http://jasoncheng.github.com/</id>
  <author>
    <name><![CDATA[JasonCheng 17hado.com(@)gmail.com]]></name>
    <email><![CDATA[info@jasoncheng.tw]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js ready for production, some tips.]]></title>
    <link href="http://jasoncheng.github.com/blog/2013/11/15/node-dot-js-prepare-for-production/"/>
    <updated>2013-11-15T21:25:00+08:00</updated>
    <id>http://jasoncheng.github.com/blog/2013/11/15/node-dot-js-prepare-for-production</id>
    <content type="html"><![CDATA[<p>This article is just for personal note/log, and don't know if this helpful.
Recently, we finish a small project(news web site) base on NodeJS / MongoDB(Replicaset) / MySQL.</p>

<h3>status</h3>

<p><strong>servers:</strong>  use <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 m1.medium</a> * 2 (for we don't use cluster, just 1 core CPU is enough; but why not use small instance, it's network issue); Theoretically, one server can handle all of this, but for more safety reason(LoadBalance), we take two.</p>

<p><strong>pageview:</strong> about 5 million pageview per day (i believe it's can handle more request)</p>

<p><strong>max concurrency user:</strong> 15,000</p>

<p><strong>nodejs version:</strong> 0.10.21</p>

<p><strong>jobs: </strong></p>

<pre><code>- huge amount news pages(directly query mongodb, and do layout)
- each page at least require 50 ~ 200 mongodb query(It's a long story, that i don't wanna mention about)
- each page response time approximate 50~100ms
- JSONP APIs
- proxy 80 port request to another port number(maybe mobile web/different domain) which listened by NodeJS too
- 302+301 redirect
</code></pre>

<h3>package.json</h3>

<p><code>
"dependencies": {    
  "express": "3.4.4",
  "http-proxy": "0.10.2",
  "mongodb": "1.3.19",    
  "sequelize": "1.6.0",   
  "dateformat": "~1.0.4",
  "flow": "0.2.3",   
  "memcached": "0.1.5",   
  "node-cache": "0.0.4",
  "consolidate": "0.8.0",
  "swig": "~0.13.5",
  "sprintf": "0.1.1",
  "request": "2.27.0",    
  "solr": "0.2.2",   
  "MD5": "1.0.3",    
  "xml2js": "0.2.7",
  "log-prefix": "0.0.0",  
  "sitemap": "0.6.0",
  "mysql": "2.0.0-alpha9",
  "colors": "~0.6.2"
}
</code></p>

<h3>cache as possible as you can</h3>

<p>cache everything, and let it auto expire maybe few mins; for, NodeJS is a daemon,
sometime in-memory cache is better/faster than memcached server,
and most important things is it no necessary to convert <strong>Object/Array &lt;=> string</strong> each time you get and set.</p>

<p>so, i cache Object/Array use <a href="https://github.com/ptarjan/node-cache">node-cache</a>, but be aware on call by reference.</p>

<h3>keep process run forever</h3>

<p>Before, i use <a href="https://github.com/nodejitsu/forever">forever</a> to keep process running, it's very useful module;
but currently i use init script instead. here is my example(/etc/init/web.conf):</p>

<p>```
start on (local-filesystems and net-device-up IFACE=eth0)     <br/>
stop on shutdown</p>

<p>respawn</p>

<p>script    <br/>
  sleep 5        <br/>
  export NODE_ENV=production  <br/>
  cd /var/www/web
  exec /usr/bin/node --nouse-idle-notification www.js 2>&amp;1 >> /var/log/node/www.log
end script<br/>
```</p>

<h3>prevent use JSON.parse / JSON.stringify</h3>

<p>In my experience, after your node run about few days(approximate handle 20M requests),
if you use those two method on frequently request,
100% i can sure that your node process will reach 100% CPU usage and finally can't handle any request/response.</p>

<p>It's can be trace through <a href="https://github.com/bnoordhuis/node-heapdump">heapdump</a>.</p>

<p><code>
var b = JSON.stringify({c:1293, t:'ads'});
</code></p>

<p>maybe few days, will become....</p>

<p><code>
b = '\\\\\\\\\\\\\\\\\...........';  // endless slash
</code></p>

<p>weird, right? i can't explain why? but after use heapdump i found this and fixed.</p>

<p>my another EC2 server(m1.medium x 2) each handle 2.5M request per day, simple respose HTTP Header,
calculator pageview and update mongodb fields (count++);
all server after run 4 days, it's will no response, and no any error, can't handle any request. all i can do is just restart
this service.</p>

<p>after remove all JSON.parse/JSON.stringify, its alive form 4 days to 1 month before last time i restart.</p>

<h3>too many open files</h3>

<p><a href="http://stackoverflow.com/questions/5321432/simple-nodejs-http-proxy-fails-with-too-many-open-files">configure like this</a></p>

<h3>log as more details as you can</h3>

<p>my expressjs setting.</p>

<p>```
app.configure('development', function(){ <br/>
  app.use(express.logger('dev'));
});</p>

<p>app.configure('production', function(){  <br/>
  app.use(express.logger('default'));
});
```</p>

<p>and my logrotate config is.</p>

<p><code>
/var/log/node/*.log{  
  rotate 30
  daily
  missingok
  notifempty
  delaycompress  
  compress  
  copytruncate   
}
</code></p>

<h3>process.on('uncaughtException')</h3>

<p><a href="http://nodejs.org/api/process.html#process_event_uncaughtexception">according to this</a>, don't use it.</p>

<h3>think before use express.static</h3>

<p>our new web site when lunch, first issue popup is static file server (NodeJS+express.static) not powerful,
can't handle large request on photos/css/images/javascript,
even all static file send {maxAge:86000}, it's just slowly and finally no any response.</p>

<p>maybe nginx or apache is a good option for static file server.</p>

<h3>Be careful on call by reference</h3>

<p>Object or Array are call by reference, be careful.</p>

<h3>mongoDB no open connection issue</h3>

<p>We have 3 mongodb build with replicaset.
This problem make me confuse for a long time, sometimes the mongodb connection reset, sometimes it's show no open connection;
and we tracing the wrong way either.</p>

<p>But all my no open connection issue come from below (i'm 99% sure, not node mongo native module issue).
In my case, those two</p>

<pre><code>- prevent recursive call
- prevent use process.uncaugthException
</code></pre>

<p>Below example, will produce "no open connection", after few seconds:</p>

<p>```
process.on('uncaughtException', function(err) {
  console.log('Caught exception: ' + err);  // watch this full code trace, you will figure out why connection drop!
});</p>

<p>flow.exec(
  function(){</p>

<pre><code>db.find({lastName: 'jason'}).toArray(this);
</code></pre>

<p>  },
  function(err, docs){</p>

<pre><code>var data = [];
for(var idx in docs){
  docs[idx].ooo = docs[idx].notExists.ooo; // will die here, then caugth by uncaughtException
  data.push(docs[idx]);
}
this(data);
</code></pre>

<p>  },
  function(data){</p>

<pre><code>res.render('index.html', data);
</code></pre>

<p>  }
);
```</p>

<p>What if, you still have to use process.on('uncaughtException') for some reason ?</p>

<p>try process.nextTick, to escape this exception affect to mongo module, it's useful!</p>

<h3>wrote test case</h3>

<p>thinking about all situation, and wrote into test case(maybe use <a href="http://visionmedia.github.io/mocha/">mocha</a>),
for production service when occur unknow bug, this is quick solution to find the issue.</p>

<pre><code>- such as, testing all recently URL through sitemap.xml ? if HTTP Status 200 Okay
- such as, detect mognodb status, can be find data, can be use aggregate.....
- such as, is MySQL/Memcached/Solr server alive?
</code></pre>

<h3>NodeJS console</h3>

<p>use different log level (info/warn/error/log) and maybe add some <a href="https://github.com/Marak/colors.js">color</a>(red/yellow) for more easier to debug.</p>

<p>console.warn and console.error is stderr, it won't wrote message when NODE_ENV=production,
maybe you should override console object for this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[幫你的 Cacti 加個監控告警機制]]></title>
    <link href="http://jasoncheng.github.com/blog/2012/07/24/new-node-module-cacti-host-updown-monitor/"/>
    <updated>2012-07-24T22:47:00+08:00</updated>
    <id>http://jasoncheng.github.com/blog/2012/07/24/new-node-module-cacti-host-updown-monitor</id>
    <content type="html"><![CDATA[<p>玩了幾個月的 Node, 而且昨晚睡不著, 裝了 cacti 起來玩玩 (<strong><em> 是的, 我很宅 </em></strong>),
今天撞到頭的想把自己寫的爛東西  <a href="http://search.npmjs.org/#/cacti-host-updown-monitor">cacti-host-updown-monitor</a>, 分享一下!</p>

<p>畢竟用的 node_modules 好一陣子了, 從來也沒用Github 來 OpenSource (羞~~這樣也叫 OpenSource... <strong><em> 指 </em></strong>) .
趁這個機會, 順便來玩玩 npm 發佈.</p>

<p><code>sh
$ npm adduser (建立你的帳號)
$ npm publish (發佈 Node Module 到 NPM Registry)
</code></p>

<p>或許你會說, <a href="http://www.cacti.net/">cacti</a> 不是已經有很多 plugin 了; 比如說, <code>thold</code> 之類的 Thresholds / Alarms 機制了,
是的, 沒錯; <strong><em> But i don't care </em></strong>, 這部分我不想裝 plugin, 我只想用自己寫的...哈!</p>

<p>題外話: 現在回想起來, 比起 cacti 以前在 TTN 弄的那套 Device Monitor 還真好用(誤)....但這都是過去了...過去了...</p>

<h3>適用對象</h3>

<pre><code>- 白老鼠
- 不怕死的勇者
- 有使用 cacti 做 device monitor 的人.
</code></pre>

<h3>適用的cacti版本</h3>

<pre><code>- ALL
</code></pre>

<h3>唯一的用途</h3>

<pre><code>- 當監控的Device Down, 就會發出告警信件通知
</code></pre>

<p><code>sh 安裝
$ npm install cacti-host-updown-monitor
</code></p>

<p>主程式沒有幾行扣, 呵呵...見笑了!</p>

<p><div><script src='https://gist.github.com/3170658.js?file='></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/3170658&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJS 好物 node-http-proxy]]></title>
    <link href="http://jasoncheng.github.com/blog/2012/07/19/node-http-proxy/"/>
    <updated>2012-07-19T23:50:00+08:00</updated>
    <id>http://jasoncheng.github.com/blog/2012/07/19/node-http-proxy</id>
    <content type="html"><![CDATA[<p>今天要介紹一個超棒的 node_module, 小弟用了一陣子了, 覺得好用, 推薦給大家;
如果你的角色是 Server Administrator 的話,
請繼續往下看, 希望這篇簡短地介紹, 會增加你工作上的效率 (我到底在扯什麼...).</p>

<h3>重點是, 把 port 80, 交給 NodeJS 吧</h3>

<p>公司 R&amp;D 狀況:</p>

<pre><code>- Team A 寫 Java servlet, 提供一些啥鬼的WebService
- Team B 負責用 apache + PHP 寫 EndUser 網頁
- Team C 負責用 NodeJS 寫開放的API
- Team D 要用 nginx + php5-fpm 來寫後台控管網頁
- Team D 要用 Perl + Mason 寫統計網頁
</code></pre>

<p>Server:</p>

<pre><code>- Server01: 8.8.8.8 / 192.168.1.1
- Server02: 192.168.1.2
</code></pre>

<p>Assume:</p>

<pre><code>- 所有的服務都要有專屬網址
- 所有的服務只能用80 port
- domain name: jasoncheng.tw
</code></pre>

<p>``` js 在 server01 只要寫幾行code, 一切就幫你搞定
var options = {
  hostnameOnly: false,
  router: {</p>

<pre><code>// Team A
'jasoncheng.com/servlet':   'server01:8081',

// Team B
'jasoncheng.tw':            'server01:8082',

// Team C
'api.jasoncheng.tw':        'server02:8083',

// Team C
'adm.jasoncheng.tw':        'server02:8084',

// Team D 
'adm.jasoncheng.tw/static': 'server02:8085'
</code></pre>

<p>  }
};</p>

<p>require("http-proxy").createServer(options).listen(80);
```</p>

<p>當然, 或許你會說 Nginx / Apache 本身也可以做到這些需求, 但不可否認, 人要趕流行不是嗎?
那就用 NodeJS 囉! 這麼多人都說 <strong><em> The Next Big Thing is Node </em></strong> 了.</p>

<p>今天, 不管開發人員要用哪些技術來寫網頁/API, 要用湯姆貓/阿帕契/引擎X當Server......都沒差;
難搞的系統管理者, 就可以趁機會跟同事們好好交朋友, 快速地幫程式開發人員, 弄一組專屬的 Demo 網址吧.</p>

<p><code>sh Do It Now!!
$npm install http-proxy
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[善用 HttpResponseCache]]></title>
    <link href="http://jasoncheng.github.com/blog/2012/07/17/httpresponsecache/"/>
    <updated>2012-07-17T21:16:00+08:00</updated>
    <id>http://jasoncheng.github.com/blog/2012/07/17/httpresponsecache</id>
    <content type="html"><![CDATA[<p>之前寫 Android App 都要自己實作 Cache, 不管是圖片或者是API資料;</p>

<p>比如說: 打開程式後, 如果Local有Cache就先讀取Cache; 然後在暗地裡發送Request去更新圖片/API資料等...
當有新的, 直接複寫本地端的緩存, 然後 notify refresh.  而且還要防止Cache太多, 要定時刪除舊的資料....</p>

<p><strong><em> 太累了 </em></strong></p>

<h3>使用的好處</h3>

<pre><code>- 節省用戶端的電力 (因為可以少掉很多Internet Connection)
- 省下龐大的頻寬費用 (因為對Server來說, 當收到 If-Modified-Since, 如果沒更新, Server端只要回應 304即可)
- 開發者不用自己再做 Cache 機制了.
- 最好的事!! 如果你本身不是用 HttpClient, HttpDefaultClient..., 而是用 HttpURLConnection的話, 你根本不用改本來的 Code.
</code></pre>

<p>接下來, 實作吧!! 其實很簡單, 你不必改寫你的任何Code,
你只要 Application層, 把它啓用就好了; 剩下的一切 HttpURLConnection 會幫你處理</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ResponseApplication.java)</span> <a href='/downloads/code/ResponseCache/ResponseApplication.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">testresponsecache</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Application</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResponseApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(){</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">enableHttpResponseCache</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">enableHttpResponseCache</span><span class="o">(){</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">httpCacheSize</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">;</span>
</span><span class='line'>      <span class="n">File</span> <span class="n">httpCacheDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">getCacheDir</span><span class="o">(),</span> <span class="s">&quot;http&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;android.net.http.HttpResponseCache&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;install&quot;</span><span class="o">,</span> <span class="n">File</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">long</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">httpCacheDir</span><span class="o">,</span> <span class="n">httpCacheSize</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="s">&quot;===&gt;&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (MainActivity.java)</span> <a href='/downloads/code/ResponseCache/MainActivity.java'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">testresponsecache</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.HttpURLConnection</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.AsyncTask</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.annotation.SuppressLint</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Bitmap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.BitmapFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View.OnClickListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Button</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ImageView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>  <span class="n">ImageView</span> <span class="n">img</span><span class="o">;</span>
</span><span class='line'>  <span class="n">Button</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">img</span> <span class="o">=</span> <span class="o">(</span><span class="n">ImageView</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">img</span><span class="o">);</span>
</span><span class='line'>    <span class="n">msg</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">msg</span><span class="o">);</span>
</span><span class='line'>    <span class="n">msg</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">InternetTask</span><span class="o">().</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">&quot;NewApi&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">class</span> <span class="nc">InternetTask</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">jsonStr</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@SuppressLint</span><span class="o">(</span><span class="s">&quot;NewApi&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Boolean</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'>      <span class="n">img</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class='line'>      <span class="n">msg</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">jsonStr</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Boolean</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Test download image</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://jasoncheng.tw/1.png&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">());</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'>        <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span> <span class="n">ops</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">Options</span><span class="o">();</span>
</span><span class='line'>        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">ops</span><span class="o">);</span>
</span><span class='line'>        <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Test download JSON data</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://jasoncheng.tw/1.json&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">HttpURLConnection</span> <span class="n">conn</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpURLConnection</span><span class="o">)</span> <span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">openConnection</span><span class="o">());</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">connect</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">jsonStr</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
</span><span class='line'>        <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="n">conn</span><span class="o">.</span><span class="na">disconnect</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>js 接下來用 NodeJS 寫個簡單的Static File Server
var express = require("express");
app = express.createServer();
app.use(express.logger());
app.use(express.static(__dirname + '/public'));
app.listen(4000);
</code></p>

<p>``` sh 每個Request都會產生兩隻檔案, 一個是實體檔案, 一個是 HTTP Header 資料</p>

<h1>cd /data/data/com.example.testresponsecache/cache/http</h1>

<h1>ls -l</h1>

<p>-rw------- u0_a48   u0_a48        345 2012-07-17 23:07 20ebbdb944f2be7d9ea96466bafe98a5.0
-rw------- u0_a48   u0_a48         42 2012-07-17 23:07 20ebbdb944f2be7d9ea96466bafe98a5.1
-rw------- u0_a48   u0_a48        321 2012-07-17 23:07 7abaca174bffb497cea054db94961804.0
-rw------- u0_a48   u0_a48      11856 2012-07-17 23:07 7abaca174bffb497cea054db94961804.1
-rw------- u0_a48   u0_a48        163 2012-07-17 23:07 journal
```</p>

<p>``` sh 整個的運作的關鍵就在 Last-Modified</p>

<h1>cat 20ebbdb944f2be7d9ea96466bafe98a5.0</h1>

<p>http://jasoncheng.tw/1.json
GET
0
HTTP/1.1 200 OK
9
Connection: keep-alive
Content-Encoding: gzip
Content-Type: text/plain; charset=utf-8
Date: Tue, 17 Jul 2012 15:01:31 GMT
Last-Modified: Tue, 17 Jul 2012 13:24:14 GMT
Server: nginx/0.7.65
Transfer-Encoding: chunked
X-Android-Received-Millis: 1342537658233
X-Android-Sent-Millis: 1342537658210
```</p>

<p><code>sh 第1次執行
- [Tue, 17 Jul 2012 15:14:18 GMT] "GET /1.png HTTP/1.1" 200 11856 "-" "Dalvik/1.6.0 (Linux; U; Android 4.1; sdk Build/JRN83C)"
- [Tue, 17 Jul 2012 15:14:20 GMT] "GET /1.json HTTP/1.1" 200 22 "-" "Dalvik/1.6.0 (Linux; U; Android 4.1; sdk Build/JRN83C)"
</code></p>

<p><code>sh 第2次執行, Server 好輕鬆, 只要回304就好了, 省下多少頻寬阿
- [Tue, 17 Jul 2012 15:14:36 GMT] "GET /1.png HTTP/1.1" 304 - "-" "Dalvik/1.6.0 (Linux; U; Android 4.1; sdk Build/JRN83C)"
- [Tue, 17 Jul 2012 15:14:36 GMT] "GET /1.json HTTP/1.1" 304 - "-" "Dalvik/1.6.0 (Linux; U; Android 4.1; sdk Build/JRN83C)"
</code></p>

<p><code>sh 修改1.json檔案後, Last-modified 改變了, 所以重新抓一次, 所以 Status Code 變回 200 Okay!
root@ubuntu:/var/www/html/jasoncheng/static_test# node web.js | grep -v favicon
- [Tue, 17 Jul 2012 15:17:30 GMT] "GET /1.png HTTP/1.1" 304 - "-" "Dalvik/1.6.0 (Linux; U; Android 4.1; sdk Build/JRN83C)"
- [Tue, 17 Jul 2012 15:17:30 GMT] "GET /1.json HTTP/1.1" 200 17 "-" "Dalvik/1.6.0 (Linux; U; Android 4.1; sdk Build/JRN83C)"
</code></p>

<h3>測試結果</h3>

<pre><code>- Okay: 關閉網路後, 圖片/JSON 資料會自己返回 Local Cache 的資料 (所以用戶不會感覺網路斷線了..嘿)
- Okay: 資料更新後, JSON會自動更新
- Okay: 檔案沒改變的條件下, Server 只回應304
</code></pre>

<h3>測試後的問題</h3>

<pre><code>- Client 端必須是 Android 4.0 以後版本才有支援 (真是XD...我的NexusOne 沒辦法升到4.0啦~~~)
- Server 上的圖片修改後, Client端並不會即時更新; 懶得翻 Android Source Code了..有興趣的朋友, 再去追 (不過也沒差吧, 應該沒有人大頭照常換的吧)
- 如果遇到特殊的 port number (非80 port), cache不會生效.
</code></pre>

<h3>2012/07/24 更新</h3>

<p><code>java Force a network response
  connection.addRequestProperty("Cache-Control", "max-age=0");
</code></p>

<p><code>java Force a cache response
  connection.addRequestProperty("Cache-Control", "only-if-cached");
</code></p>
]]></content>
  </entry>
  
</feed>
